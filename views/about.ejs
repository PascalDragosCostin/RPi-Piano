<fieldset class="field">
    <div class="dcol-sm-12 col-xs-12 col-md-12 col-lg-12 text-center">
        <div class="title">About RaspberryPi Zero WH</div>
    </div>
    <hr />
    <p><b>The Raspberry Pi</b> (/paɪ/) is a series of small single-board computers developed in the United Kingdom
        by
        the
        Raspberry
        Pi Foundation to promote teaching of basic computer science in schools and in developing countries</p>

    <p>
        <b>The Raspberry Pi Zero WH</b> extends the Pi Zero family. Launched at the end of February 2017, the Pi
        Zero W
        has
        all the
        functionality of the original Pi Zero but with added connectivity.
    </p>
    <hr />
    <p>

        <b>Specifications of RPi Zero WH:</b>
        <br />
    <ul type="dot">
        <li>1GHz, single-core CPU</li>
        <li>512MB RAM</li>
        <li>Mini HDMI and USB On-The-Go ports</li>
        <li>Micro USB power</li>
        <li>HAT-compatible 40-pin header</li>
        <li>Composite video and reset headers</li>
        <li>CSI camera connector</li>
    </ul>
    <ul>
        <li>802.11 b/g/n wireless LAN</li>
        <li>Bluetooth 4.1</li>
        <li>Bluetooth Low Energy (BLE)</li>
        <li>Pre-soldered GPIO header</li>
    </ul>
    <figure>
        <img src="./images/Rpi.png" width="100%" alt="RPIPhoto">
        <figcaption>RaspberryPi ZERO WH</figcaption>
    </figure>
    </p>
</fieldset>

<br>
<br>
<br>
<br>


<fieldset class="field">
    <div class="dcol-sm-12 col-xs-12 col-md-12 col-lg-12 text-center">
        <div class="title">About project</div>

    </div>
    <hr />
    <p><b>Name: </b>RPi-Piano</p>
    <hr />
    <p><b>Pitch: </b>The project contains WEB development: Front-End (HTML, CSS, JavaScript), Back-End (Node.js)
        and Python3 programming on a RaspberryPi running Raspbian (Linux). </p>
    <hr />

    <p><b>Dificulty: </b>Intermediate WEB programming, Medium Embedded systems knowledge</p>
    <hr />
    <p><b>Category: </b>Raspberry Pi, Linux</p>
    <hr />
    <p><b>Story: </b></p>

    <p>This project combines different areas of programming, like WEB development and Embedded systems.
    </p>
    <p>Raspberry Pi runs a Node.js 14 server. Because of that, the piano can be accessed by anywhere and by any
        device that has a network connection and an installed browser.
    </p>

    <p>The server provides a website that contains 4 pages:
    </p>

    <ul>
        <li>"Piano" is the main page and presents tiles, a list of themes, a controller with which you can
            select Chords or Notes view, and buttons for the seven octaves.</li>
        <li>
            "About" page contains information about the Raspberry Pi development board and the project.
        </li>
        <li>"Demo" page has some videos and images with the project running.</li>
        <li>"Stats" page includes information about the development board like temperature of the processor,
            available RAM. There is also listed network data.</li>
    </ul>

    <p>
        The static part of interface is written in HTML5 and CSS3. Keys are simple divs that has different classes.
    </p>
    <p>
        The dynamic part of the interface is written in JavaScript (client side), and provides responses for actions
        like hovering,
        pressing a tile or changing visual aspects. The communication with the server (get and post methods) is also
        written in JavaScript.
        I used AJAX for asynchronous programming.
        Some elements like selected theme, selected octave, chords or notes view are stored on the server for a smooth
        experience.
    </p>
    <p>
        The server processes requests for different pages (there is actually a layout for the entire site so the pages
        look similar), contains the logic for interpreting the pressed keys (with mouse or with keyboard (Z-M for tones
        and S-J for Semitones).
    </p>
    <p>
        When servers starts, it spawns a python process. When a key is pressed, the servers pass the information to
        the python script wich controls the buzzer and the display.
    </p>
    <br />
    <p>
        The buzzer is controlled by a PWM (Pulse Width Modulation). Frequency corresponds to the musical note and duty
        cycle is always 50%.
    <p>
        In the schematic you will see a BJT (bipolar junction transistor) for current amplification and to relieve
        stress of the pin. The output voltage of the ARM 11 processor is 3.3V, but because of the transistor, the buzzer
        uses 5V direct from the power supply.
    </p>
    <p>
        The diode is present because the passive buzzer is a piezoelectric component that generates reverse voltage when
        unplugged.
    </p>
    </p>
    <p>
        The display is 4 digit 7 segments common Cathode display. It shows the frequency of the sound that the buzzer
        sings. Because it uses led, I inserted 4 resistance on every digit cathode to limit current through it. </p>

    <hr />
    <p>
        <b>Hardware Components:</b>
    <ul>
        <li>RaspberryPi Zero WH </li>
        <li>Breadboard 830p </li>
        <li>Passive buzzer</li>
        <li>4 Digit 7 Segment Common Cathode Display</li>
        <li>Diode</li>
        <li>Bipolar junction transistor</li>
        <li>4 x 150Ω resistors</li>
        <li>1 x 1000Ω resistor</li>
        <li>Male-to-male jumper wires</li>
        <li>Male-to-female jumper wires</li>
    </ul>
    </p>
    <hr />
    <p>
        <b>Software Components:</b>
    <ol>
        <li>Raspberry Pi Raspbian</li>
        <li>Python 3</li>
        <ul>
            <li>pigpio library</li>
            <li>RPi.GPIO library</li>
        </ul>
        <li>Node.js</li>
        <ul>
            <li>npm</li>
            <li>express</li>
            <li>ejs</li>
            <li>body-parser</li>
            <li>nodemon (<i>optional</i>)</li>
        </ul>
    </ol>
    <hr />
    <br />
    <br />
    <p>
        <b>Schematic:</b>
        <br>
    <figure>
        <img src="images/Schematic.png" alt="schematic" width="100%" height="100%">
        <figcaption>Fig.2 - Schematic</figcaption>
    </figure>
    <hr />
    </p>
    <br />
    <br />
  
    <p><b>Real Photos:</b></p>

    <figure>
        <img src="images/real2.jpg" alt="real2" width="100%" height="100%">
        <figcaption>Fig.3 - Real Photo - front view </figcaption>
    </figure>
    <hr />
  
    <figure>
        <img src="images/real1.jpg" alt="real1" width="100%" height="100%">
        <figcaption>Fig.4 - Real Photo - side view</figcaption>
    </figure>
    <hr />

    <figure>
        <img src="images/Android.jpg" alt="Android photo" width="100%" height="70%">
        <figcaption>Fig.4 - Accesing website from Android</figcaption>
    </figure>

    </p>
    </p>
</fieldset>
<br />
<br />